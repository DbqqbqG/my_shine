FastCGI взаимодействует с клиентом через сокеты или TCP/IP-соединение. 

Несмотря на то, что код ответа формируется сервером в первую очередь, еще до запуска
сценария мы можем изменить его в CGI-скрипте при помощи "фиктивного" заголовка
Status. Например, напечатав в скрипте
Status: 404 Not Found

Content-type: mime_тип; charset=utf-8
Задает тип документа и его кодировку. Параметр charset указывает кодировку документа
(в нашем примере это UTF-8). Поле mime_тип определяет тип информации, которую
содержит документ:
 text/html — HTML-документ;
 text/plain — простой текстовый файл;
 image/gif — GIF-изображение;
 image/jpeg — JPG-изображение;
еще несколько десятков других типов.

Pragma: no-cache
Запрещает кэширование документа браузером, так что при повторном визите на страницу
браузер гарантированно загрузит ее снова, а не извлечет из своего кэша. Это может
быть полезно, если страница содержит, например, динамический счетчик посещений.

Location: http://www.otherhost.com/somepage.html
Этот заголовок особенный и определяет, что браузер пользователя должен немедленно
перейти по указанному адресу, не дожидаясь тела документа ответа (как будто бы
пользователь сам набрал в адресной строке нужный URL). Так что если вы собираетесь
использовать заголовок Location, то за ним не должен следовать документ.

Set-cookie: параметры_cookie
Устанавливает cookie в браузер пользователя.

Date: Sat, 08 Jan 2000 11:56:26 GMT
Указывает браузеру дату отправки документа.

Server: nginx/1.4.6 (Ubuntu)
Устанавливается сервером и указывает браузеру тип сервера и другую информацию
о серверном программном обеспечении.

HTTP_ACCEPT
В этой переменной перечислены все (во всяком случае, так говорится в документации)
MIME-типы данных, которые могут быть восприняты браузером. Как мы уже
замечали, современные браузеры частенько ленятся и передают строку */*, означающую,
что они якобы понимают любой тип.
 HTTP_REFERER
Задает имя документа, в котором находится форма, запустившая CGI-сценарий. Эту
переменную окружения можно задействовать, например, для того, чтобы отслеживать перемещение пользователя по вашему сайту (а потом, например, где-нибудь
распечатывать статистику самых популярных маршрутов).
 HTTP_USER_AGENT
Идентифицирует браузер пользователя. Как правило, если в данной переменной
окружения присутствует подстрока MSIE, то это Internet Explorer, в противном случае,
если в наличии лишь слово Mozilla, — FireFox, Chrome или другой браузер.
 HTTP_HOST
Доменное имя Web-сервера, на котором запустился сценарий. Точнее, то, что было
передано в заголовке Host протокола HTTP 1.1. Эту переменную окружения довольно
удобно использовать, например, для генерации полного пути, который требуется
в заголовке Location, чтобы не привязываться к конкретному серверу (вообще говоря,
чем меньше сценарий задействует "зашитую" в него информацию об имени сервера,
на котором он запущен, тем лучше — в идеале ее не должно быть вовсе).
Если обращение производилось к нестандартному, отличному от 80-го, порту (например,
81 или 8080), то HTTP_HOST содержит также и номер порта, указанный после
имени хоста и двоеточия: хост:порт.
 SERVER_PORT
Порт сервера (обычно 80), к которому обратился браузер пользователя. Также может
привлекаться для генерации параметра заголовка Location.
 REMOTE_ADDR
Эта переменная окружения задает IP-адрес (или доменное имя) узла пользователя,
на котором был запущен браузер.
 REMOTE_PORT
Порт, который закрепляется за браузером пользователя для получения ответа сервера.

 SCRIPT_NAME
Виртуальное имя выполняющегося сценария (т. е. часть URL после имени сервера,
но до символа ?). Эту переменную окружения, опять же, очень удобно брать на вооружение
при формировании заголовка Location при "переадресации на себя" (selfredirect),
а также при проставлении значения атрибута action тега <form> на странице,
которую выдает сценарий при запуске без параметров (для того чтобы не привязываться
к конкретному имени сценария).
 REQUEST_METHOD
Метод, который применяет пользователь при передаче данных (мы рассматриваем
только GET и POST, хотя существуют и другие методы). Надо заметить, что грамотно
составленный сценарий должен сам определять на основе этой переменной, какой
метод задействует пользователь, и принимать данные из соответствующего источника,
а не рассчитывать, что передача будет осуществляться, например, только методом
POST. Впрочем, все PHP-сценарии так и устроены.
 QUERY_STRING
Параметры, которые в URL указаны после вопросительного знака. Напоминаем, что
они доступны как при методе GET, так и при методе POST (если в последнем случае
они были определены в атрибуте action тега <form>).
CONTENT_LENGTH
Количество байтов данных, присланных пользователем. Эту переменную необходимо
анализировать, если вы занимаетесь приемом и обработкой POST-формы. 



